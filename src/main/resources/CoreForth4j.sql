/*
 * Copyright 2024 Robert A. James
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Copyright 2024 Robert A. James
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

-- H2 2.2.220;
SET DB_CLOSE_DELAY -1;
;
CREATE USER IF NOT EXISTS "SA" SALT '7cc2be3d2ec4eefd' HASH 'bba772ac15b24bb58ca61dd8e4a8b8fc0c26f7c38310e3273b82394c22e9b972' ADMIN;
CREATE SEQUENCE "PUBLIC"."HIBERNATE_SEQUENCE" START WITH 1 RESTART WITH 30;
CREATE MEMORY TABLE "PUBLIC"."DICTIONARY"
(
    "ID" INTEGER NOT NULL,
    "NAME" CHARACTER VARYING(255)
);
ALTER TABLE "PUBLIC"."DICTIONARY"
    ADD CONSTRAINT "PUBLIC"."CONSTRAINT_3" PRIMARY KEY ("ID");
-- 1 +/- SELECT COUNT(*) FROM PUBLIC.DICTIONARY;               
INSERT INTO "PUBLIC"."DICTIONARY"
VALUES (1, 'Core');
CREATE MEMORY TABLE "PUBLIC"."FORTHWORDS"
(
    "WORD_ID" BIGINT NOT NULL,
    "FORTH_WORD_NAME" CHARACTER VARYING(255)
);      
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.FORTHWORDS;               
CREATE MEMORY TABLE "PUBLIC"."WORD"
(
    "ID"            BIGINT                 NOT NULL,
    "ARGUMENTCOUNT" INTEGER,
    "COMPILEONLY"   BOOLEAN,
    "COMPILERDIRECTIVE" CHARACTER VARYING,
    "CONTROLWORD" BOOLEAN,
    "CREATEDATETIME" TIMESTAMP,
    "NAME"          CHARACTER VARYING(255) NOT NULL,
    "RUNTIMEBEHAVIOR" CHARACTER VARYING,
    "STACKVALUE"    INTEGER,
    "STRINGLITERAL" CHARACTER VARYING(255),
    "VERSION"       INTEGER                NOT NULL,
    "DICTIONARY_ID" INTEGER                NOT NULL,
    "PARENT_WORD_NAME" BIGINT
);
ALTER TABLE "PUBLIC"."WORD"
    ADD CONSTRAINT "PUBLIC"."CONSTRAINT_2" PRIMARY KEY ("ID");
-- 28 +/- SELECT COUNT(*) FROM PUBLIC.WORD;    
INSERT INTO "PUBLIC"."WORD"
VALUES (2, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.133', 'noop', NULL, NULL, NULL, 0, 1, NULL),
       (3, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.192', 'nop', NULL, NULL, NULL, 0, 1, NULL),
       (4, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.242', 'defdump',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Dump extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Word dumpWord = interpreter?.words?.remove()\000a        println(dumpWord.toString())\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (5, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.272', '+',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Plus extends AbstractRuntime {\000a\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() + interpreter.dataStack.pop())\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (6, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.293', '-',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Minus extends AbstractRuntime {\000a\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() - interpreter.dataStack.pop())\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (7, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.319', '.',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Dot extends AbstractRuntime {\000a\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        print(interpreter.dataStack.pop())\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (8, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.344', 'cr',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Cr extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        println()\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (9, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.367', 'emit',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Emit extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        print((char) interpreter.dataStack.pop())\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (10, 0, FALSE,
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage compiler\000a\000a\000aimport com.rajames.forth.compiler.AbstractCompilerDirective\000aimport com.rajames.forth.compiler.ForthCompiler\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.springframework.transaction.annotation.Transactional\000a\000aimport java.util.concurrent.ConcurrentLinkedQueue\000a\000aclass DotQuoteC extends AbstractCompilerDirective {\000a\000a    @Override\000a    @Transactional\000a    Boolean execute(Word word, ForthCompiler compiler, ForthInterpreter interpreter) {\000a        ConcurrentLinkedQueue<Word> words = interpreter.words\000a        ConcurrentLinkedQueue<String> nonWords = interpreter.nonWords\000a        Word nextWord = null\000a        try {\000a            nextWord = words.remove()\000a        } catch (Exception ignored) {\000a        }\000a        while (!nonWords.isEmpty()) {\000a            String stringLiteral = nonWords.remove()\000a            if (stringLiteral == "\\"") {\000a                break\000a            }\000a            Word literal = compiler.literal\000a            Word wordLiteral = new Word()\000a            wordLiteral.name = "str_${literal.name}_${UUID.randomUUID().toString()}"\000a            wordLiteral.runtimeClass = literal.runtimeClass\000a            wordLiteral.stringLiteral = stringLiteral - "\\""\000a            wordLiteral.compileOnly = true\000a            wordLiteral.dictionary = compiler.dictionary\000a            wordLiteral.parentWord = compiler.newWord\000a            compiler.wordService.save(wordLiteral)\000a\000a            compiler.forthWordsBuffer.add(wordLiteral.name)\000a            if (stringLiteral.endsWith("\\"")) {\000a                break\000a            }\000a        }\000a        if (nextWord != null) {\000a            compiler.forthWordsBuffer.add(nextWord.name)\000a        }\000a        return false\000a    }\000a}\000a',
        FALSE, TIMESTAMP '2024-02-06 14:39:38.398', '."',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aimport java.util.concurrent.ConcurrentLinkedDeque\000a\000aclass DotQuote extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        ConcurrentLinkedDeque<String> tokens = interpreter.nonWords\000a        while (!tokens.isEmpty()) {\000a            String token = tokens.remove()\000a            print(token.replaceAll("\\"", "") + " ")\000a        }\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (11, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.427', '0<',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass LessThanZero extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() < 0 ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (12, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.455', '0=',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass EqualZero extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() == 0 ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (13, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.48', '0=',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass GreaterThanZero extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() > 0 ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (14, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.505', '1+',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass OnePlus extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() + 1)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (15, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.528', '1-',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass OneMinus extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() - 1)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (16, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.552', '2+',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass TwoPlus extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() + 2)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (17, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.577', '2-',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass TwoMinus extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() - 2)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (18, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.604', '2*',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass TwoTimes extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() * 2)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (19, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.631', '2/',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass TwoDivide extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() / 2)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (20, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.659', '<',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass LessThan extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push((interpreter.dataStack.pop() < interpreter.dataStack.pop()) ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (21, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.684', '>',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass GreaterThan extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push((interpreter.dataStack.pop() > interpreter.dataStack.pop()) ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (22, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.714', '=',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Equal extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push((interpreter.dataStack.pop() == interpreter.dataStack.pop()) ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (23, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.744', 'spaces',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Spaces extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer spaces = interpreter.dataStack.pop()\000a        (0..<spaces).each{\000a            print(" ")\000a        }\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (24, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.771', ':',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.compiler.ForthCompilerException\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.apache.logging.log4j.LogManager\000aimport org.apache.logging.log4j.Logger\000a\000aimport java.util.concurrent.ConcurrentLinkedQueue\000a\000aclass Colon extends AbstractRuntime {\000a\000a    private static final Logger log = LogManager.getLogger(this.class.getName())\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        // Fail Fast\000a        if (interpreter.words.stream().noneMatch(w -> w.getName().equals(";"))) {\000a            interpreter.words.clear()\000a            interpreter.nonWords.clear()\000a            throw new ForthCompilerException("No ending semicolon")\000a        }\000a\000a        ConcurrentLinkedQueue<String> nonWords = interpreter.nonWords\000a        ConcurrentLinkedQueue<Word> words = interpreter.words\000a        ConcurrentLinkedQueue<Integer> arguments = new ConcurrentLinkedQueue<>()\000a\000a        while (interpreter.dataStack.size() > 0) {\000a            Integer argument = interpreter.dataStack.pop() as Integer\000a            arguments.add(argument)\000a        }\000a\000a        // Invoke the compiler\000a        interpreter.forthCompiler.compileWord(words, arguments, nonWords)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (25, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.795', ';', NULL, NULL, NULL, 0, 1, NULL),
       (26, 0, TRUE, NULL, FALSE, TIMESTAMP '2024-02-06 14:39:38.834', 'literal',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Literal extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a\000a        // Code goes here\000a        if (word.name.startsWith("int_")) {\000a            Word lit = word\000a            Integer arg = lit.stackValue\000a            interpreter.dataStack.push(arg)\000a        } else if (word.name.startsWith("str_")) {\000a            Word lit = word\000a            String string = lit.stringLiteral\000a            if (string != "\\"") {\000a                print(word.stringLiteral.replaceAll("\\"", "") + " ")\000a            }\000a        }\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (27, 1, TRUE,
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000a/*\000a * The "IfC" class is an integral part of the compilation process of the Forth-like language interpreter.\000a * This class extends from "AbstractCompilerDirective" which forms the foundation for all the compiler directive classes.\000a *\000a * The compile-time mechanism analyzes and translates the defined Forth terms during the parsing process.\000a * For the ''IF'', ''THEN'', ''ELSE'' words, they are registered into the dictionary associated with their respective compiler directive\000a * classes (in this case, the ''IfC'' class for ''IF'').\000a *\000a * The ''IfC'' class, through its ''execute'' method, modifies the source code under interpretation to a more executable form.\000a * The ''execute'' method extracts all the tokens corresponding to a conditional control structure starting from ''IF'' and ending\000a * with ''THEN'', while properly handling the optional ''ELSE'' case as well.\000a * Thus the method assembles these tokens into a manageable structure, ready for the runtime execution.\000a *\000a * This facilitates the use and implementation of ''IF'', ''ELSE'' and ''THEN'' control structures in the language, enhancing\000a * the versatility of the interpreted language.\000a *\000a * Our test cases included:\000a * : test1 5 = if ." Five " then ;\000a * : test2 5 = if ." Five " else ." Not Five " then ;\000a*/\000a\000apackage primitives_classes.compiler\000a\000aimport com.rajames.forth.compiler.AbstractCompilerDirective\000aimport com.rajames.forth.compiler.CompilerDirective\000aimport com.rajames.forth.compiler.ForthCompiler\000aimport com.rajames.forth.compiler.ForthCompilerException\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.apache.logging.log4j.LogManager\000aimport org.apache.logging.log4j.Logger\000a\000a/**\000a * The ''IfC'' class extends the ''AbstractCompilerDirective'' super class.\000a * This compiler directive class handles the logic of the ''IF'' keyword at compile time in the interpreter.\000a */\000aclass IfC extends AbstractCompilerDirective {\000a\000a    private static final Logger log = LogManager.getLogger(this.class.getName())\000a\000a    ForthCompiler compiler\000a    ForthInterpreter interpreter\000a\000a/**\000a * The `execute` method is responsible for performing the compile-time operations for ''IF'' in the Forth compiler.\000a *\000a * @param newWord The word that is being compiled.\000a * @param compiler The ForthCompiler instance.\000a * @param interpreter The ForthInterpreter instance.\000a * @return Boolean indicating if a new line needs to be printed or not in the Forth REPL.\000a * @exception ForthCompilerException if there''s no matching ''IF'' or ''THEN'' for ''ELSE''.\000a */\000a    @Override\000a    Boolean execute(Word newWord, ForthCompiler compiler, ForthInterpreter interpreter) {\000a        this.compiler = compiler\000a        this.interpreter = interpreter\000a\000a        if (!interpreter.line.contains("if")) {\000a            interpreter.words.clear()\000a            interpreter.nonWords.clear()\000a            throw new ForthCompilerException("No matching ''IF for ''ELSE")\000a        }\000a\000a        if (!interpreter.line.contains("then")) {\000a            interpreter.words.clear()\000a            interpreter.nonWords.clear()\000a            throw new ForthCompilerException("No matching ''THEN for ''ELSE")\000a        }\000a\000a        runup()\000a\000a        while (!this.interpreter.tokensCopy.isEmpty()) {\000a            String token = this.interpreter.tokensCopy.remove()\000a            Word thenWord = this.compiler.wordService.findByName("then")\000a            Word elseWord = this.compiler.wordService.findByName("else")\000a            if (token == thenWord.name || token == elseWord.name) {\000a                if (token == thenWord.name) {\000a                    this.compiler.forthWordsBuffer.add(thenWord.name)\000a                    this.interpreter.words.remove()\000a                    break\000a                }\000a                if (token == elseWord.name) {\000a                    def classLoader = new GroovyClassLoader()\000a                    Class groovyClass = classLoader.parseClass(elseWord.compileClass)\000a                    CompilerDirective compileTime = groovyClass.getDeclaredConstructor().newInstance() as CompilerDirective\000a                    def output = compileTime.execute(this.compiler.newWord, this.compiler, this.interpreter)\000a                    break\000a                }\000a            } else {\000a                Word word = this.compiler.wordService.findByName(token)\000a                try {\000a                    this.interpreter.words.remove()\000a                } catch (Exception ignored) {\000a                    break\000a                }\000a\000a                if (word) {\000a                    this.compiler.forthWordsBuffer.add(word.name)\000a                    if (word.compileClass) {\000a                        def classLoader = new GroovyClassLoader()\000a                        Class groovyClass = classLoader.parseClass(word.compileClass)\000a                        CompilerDirective compileTime = groovyClass.getDeclaredConstructor().newInstance() as CompilerDirective\000a                        def output = compileTime.execute(this.compiler.newWord, this.compiler, this.interpreter)\000a                    }\000a                }\000a            }\000a        }\000a        return false\000a    }\000a\000a    /**\000a     * The ''runup'' method removes all tokens from the tokensCopy up to "if".\000a     * It adds "if" to the list of forthWordsBuffer.\000a     */\000a    private void runup() {\000a        // remove all tokens from the tokensCopy up to "if"\000a        while (!this.interpreter.tokensCopy.isEmpty()) {\000a            String token = this.interpreter.tokensCopy.remove()\000a            Word ifWord = this.compiler.wordService.findByName("if")\000a            if (ifWord.name == token) {\000a                // add "if" to the list of forthWordsBuffer\000a                this.compiler.forthWordsBuffer.add(ifWord.name)\000a                break\000a            }\000a        }\000a    }\000a\000a    /**\000a     * The ''compileLiteral'' method takes in a token (either integer or string literal) and\000a     * generates unique identifiers for each.\000a     * It then saves the literals as Words into the dictionary.\000a     *\000a     * @param token An Integer or String literal token\000a     * @return A Word instance representing the literal token.\000a     */\000a    private Word compileLiteral(String token) {\000a        Word wordLiteral = new Word()\000a        String uniqueId = UUID.randomUUID().toString().replaceAll("-", "")\000a        try {\000a            // Integer literals\000a            Integer i = Integer.parseInt(token)\000a            wordLiteral.name = "int_${this.compiler.literal.name}_${uniqueId}"\000a            wordLiteral.stackValue = i\000a        } catch (NumberFormatException ignored) {\000a            // string literal\000a            wordLiteral.name = "str_${this.compiler.literal.name}_${uniqueId}"\000a            wordLiteral.stringLiteral = token\000a        }\000a        wordLiteral.runtimeClass = this.compiler.literal.runtimeClass\000a        wordLiteral.compileOnly = true\000a        wordLiteral.dictionary = this.compiler.dictionary\000a        wordLiteral.parentWord = this.compiler.newWord\000a        this.compiler.wordService.save(wordLiteral)\000a        return wordLiteral\000a    }\000a}\000a',
        TRUE, TIMESTAMP '2024-02-06 14:39:38.872', 'if',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000a/*\000a * The "If" class is an integral part of the runtime mechanism of the Forth-like language interpreter.\000a * This class extends from "AbstractRuntime", the abstract class that forms the base for all the runtime classes.\000a *\000a * The runtime mechanism undertakes the actual execution of the Forth words during the interpretation process.\000a * During the parsing and compilation stage, Forth words are identified and formed into a list of words (word list) within each ''Word'' object.\000a * For words like ''IF'', they are registered into the dictionary with their corresponding runtime classes (in this case, the ''If'' class).\000a *\000a * When the interpreter encounters a defined Word during the interpretation process, it looks up the associated runtime object and calls its ''execute'' method.\000a *\000a * In the ''If'' class, the overridden ''execute'' method implements the behavior for the ''IF'' control structure of the language, including handling ''ELSE'' and ''THEN'' cases.\000a * Here''s how it happens:\000a * - Pop the top element from the data stack and consider it as a condition value.\000a * -  If the condition value equals 0 (i.e. is false) then depending upon the existence and location of an ''ELSE'' command,\000a *     either skip over the commands before ''ELSE'' or skip over all commands till ''THEN''.\000a * - If the condition value does not equal 0 (i.e. is true), let the normal execution flow continue which means execute all commands till ''ELSE'' is encountered.\000a *     If ''ELSE'' is encountered, skip to ''THEN''.\000a *\000a * This mechanism enables the use of ''IF'', ''ELSE'' and ''THEN'' control structures in the language.\000a *\000a * Our test cases included:\000a * : test1 5 = if ." Five " then ;\000a * : test2 5 = if ." Five " else ." Not Five " then ;\000a */\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000a/**\000a * The ''If'' class extends the ''AbstractRuntime'' super class.\000a * It handles the logic of the ''IF'' keyword in the interpreter.\000a */\000aclass If extends AbstractRuntime {\000a\000a    /**\000a     * The `execute` method is responsible for executing the ''IF'' operation in the forth interpreter.\000a     * It takes in the interpreter, the ''IF'' keyword and the parent word in which the ''IF'' keyword\000a     * is used as parameters.\000a     *\000a     * @param interpreter The ForthInterpreter Spring bean\000a     * @param word The word that is being interpreted.\000a     * @param parentWord The word from which ''IF'' is being executed.\000a     * @return Will ''normaly'' be Boolean true or false indicating if ForthRepl should print a new line.\000a     */\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        // The value popped from the data stack is used as the condition for the ''IF'' statement.\000a        Integer conditionValue = interpreter.dataStack.pop() as Integer\000a\000a        // Find the indices of ''ELSE'' and ''THEN'' command in parent word''s forthWords list\000a        Integer elseIndex = parentWord.forthWords.indexOf("else")\000a        Integer thenIndex = parentWord.forthWords.indexOf("then")\000a\000a        // If the condition value equals 0 (i.e. is false), and the index of ''ELSE'' command is between the ''IF''\000a        // and ''THEN'' commands,\000a        // then it sets the execution index to the elseIndex, thus skips the commands before ''ELSE'' block.\000a        if (conditionValue == 0 && elseIndex > -1 && elseIndex < thenIndex) {\000a            parentWord.executionIndex = elseIndex // Skip to ''else''\000a        }\000a\000a        // If the condition value equals 0 and the ''ELSE'' command does not exist or is located after the ''THEN'' command,\000a        // then it sets the execution index to the thenIndex, thus skips the commands before ''THEN'' block.\000a        else if (conditionValue == 0 && thenIndex > -1) { // If the condition is false\000a            parentWord.executionIndex = thenIndex // Skip to ''then''\000a        }\000a\000a        // When the condition is true or false, it does nothing,\000a        // allowing the normal execution flow to continue until an `ELSE` is encountered.\000a        // It is currently just a flag to pass to ForthRepl indicating it should or should not\000a        // print a newline at the end of execution.\000a        // Since it is an object we can return something to the interpreter under special\000a        // circumstances, BUT the interpreter must still return a proper Boolean value to ForthRepl.\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (28, 0, TRUE,
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000a\000a/*\000a * The class "ElseC" extends from "AbstractCompilerDirective", and is part of the compile-time mechanism for handling the ''ELSE''\000a * control structure in the Forth-like language interpreter.\000a *\000a * During the compilation process, the compiler directive associated with ''ELSE'' is activated upon encountering ''ELSE''.\000a * The ''ElseC'' class''s ''execute'' method processes all tokens following ''ELSE'' until it encounters ''THEN''.\000a * These tokens are sequentially translated into an executable form, to be interpreted by the runtime mechanism.\000a *\000a * Here is an example of how it''s used:\000a * If the current line being interpreted contains "if 10 = else", the execute() method would process everything after "else" until a ''THEN'' is found.\000a *\000a * A Note to developers: It helps to set a line breakpoint at the return statement and inspecting\000a * the compiler.forthWordsBuffer for correctness. This is what the ''newWord'' will `look like` once saved\000a * to the dictionary.\000a *\000a */\000apackage primitives_classes.compiler\000a\000aimport com.rajames.forth.compiler.AbstractCompilerDirective\000aimport com.rajames.forth.compiler.CompilerDirective\000aimport com.rajames.forth.compiler.ForthCompiler\000aimport com.rajames.forth.compiler.ForthCompilerException\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.apache.logging.log4j.LogManager\000aimport org.apache.logging.log4j.Logger\000a\000a/**\000a * The ''ElseC'' class extends the ''AbstractCompilerDirective'' super class.\000a * This compiler directive class handles the logic of the ''ELSE'' keyword at compile time in the interpreter.\000a */\000aclass ElseC extends AbstractCompilerDirective {\000a\000a    private static final Logger log = LogManager.getLogger(this.class.getName())\000a\000a    ForthCompiler compiler\000a    ForthInterpreter interpreter\000a\000a    /**\000a     * The `execute` method is responsible for performing the compile-time operations for ''ELSE'' in the\000a     * Forth compiler.\000a     *\000a     * @param newWord The word that is being compiled.\000a     * @param compiler The ForthCompiler instance.\000a     * @param interpreter The ForthInterpreter instance.\000a     * @return Boolean indicating if a new line needs to be printed or not in Forth REPL.\000a     * @exception ForthCompilerException If there''s no matching ''IF'' or ''THEN'' for ''ELSE''.\000a     */\000a    @Override\000a    Boolean execute(Word newWord, ForthCompiler compiler, ForthInterpreter interpreter) {\000a        this.compiler = compiler\000a        this.interpreter = interpreter\000a\000a        if (!interpreter.line.contains("if")) {\000a            interpreter.words.clear()\000a            interpreter.nonWords.clear()\000a            throw new ForthCompilerException("No matching ''IF for ''ELSE")\000a        }\000a\000a        if (!interpreter.line.contains("then")) {\000a            interpreter.words.clear()\000a            interpreter.nonWords.clear()\000a            throw new ForthCompilerException("No matching ''THEN for ''ELSE")\000a        }\000a\000a        while (!this.interpreter.tokensCopy.isEmpty()) {\000a            String token = this.interpreter.tokensCopy.poll()\000a            Word thenWord = this.compiler.wordService.findByName("then")\000a\000a            Word word = this.compiler.wordService.findByName(token)\000a\000a            if (word) {\000a                this.compiler.forthWordsBuffer.add(word.name)\000a                if (word.compileClass) {\000a                    def classLoader = new GroovyClassLoader()\000a                    Class groovyClass = classLoader.parseClass(word.compileClass)\000a                    CompilerDirective compileTime = groovyClass.getDeclaredConstructor().newInstance() as CompilerDirective\000a                    def output = compileTime.execute(this.compiler.newWord, this.compiler, this.interpreter)\000a                }\000a            }\000a\000a        }\000a\000a        // Fix things up a bit.\000a        while (compiler.forthWordsBuffer.contains(";")) {\000a            compiler.forthWordsBuffer.remove(";")\000a        }\000a        return false\000a    }\000a}',
        TRUE, TIMESTAMP '2024-02-06 14:39:38.899', 'else',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000a/*\000a * The "Else" class is part of the runtime mechanism of the Forth-like language interpreter.\000a * This class extends from "AbstractRuntime", the abstract class that forms the base for all runtime classes.\000a *\000a * This class handles the ''ELSE'' keyword. During normal execution, when ''IF'' block is entered, and ''ELSE'' command\000a * is encountered, execution is always skipped to ''THEN'' excluding the instructions between ''ELSE'' and ''THEN'' from execution.\000a * This happens whether or not the condition for ''IF'' was true or false.\000a *\000a * The presence of the commands ''IF'', ''ELSE'', and ''THEN'' introduces the concept of nested execution control into the language,\000a * thereby providing programmers using the language with greater flexibility in designing their code.\000a *\000a * The word example given below demonstrates how a condition is tested and based on the result it selects a string to print.\000a * : test 5 = if ." Five " else ." Not Five " then ;\000a */\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000a/**\000a * The ''Else'' class extends the ''AbstractRuntime'' super class.\000a * It handles the logic of the ''ELSE'' keyword in the interpreter.\000a */\000aclass Else extends AbstractRuntime {\000a\000a    /**\000a     * The `execute` method is responsible for implementing the ''ELSE'' operation in the forth interpreter.\000a     * When an ''ELSE'' is encountered during execution, it skips the commands and jumps to the ''THEN'' command.\000a     *\000a     * @param interpreter The ForthInterpreter Spring bean\000a     * @param word The word that is being interpreted.\000a     * @param parentWord The word from which ''ELSE'' is being executed.\000a     * @return It will usually be null as this command represents a control structure rather than producing a value.\000a     */\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        // Find the index of ''THEN'' command in parent word''s forthWords list\000a        Integer thenIndex = parentWord.forthWords.indexOf("then")\000a\000a        // If ''ELSE'' is hit during execution, it always skips to ''THEN''\000a        if (thenIndex > 0) {\000a            parentWord.executionIndex = thenIndex\000a        }\000a\000a        // The ''else'' block does not produce a result by itself, so method returns null\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (29, 0, TRUE, NULL, TRUE, TIMESTAMP '2024-02-06 14:39:38.926', 'then', NULL, NULL, NULL, 0, 1, NULL);
CREATE INDEX "PUBLIC"."WORD_NAME_INDEX" ON "PUBLIC"."WORD" ("NAME" NULLS FIRST);
ALTER TABLE "PUBLIC"."DICTIONARY"
    ADD CONSTRAINT "PUBLIC"."UK_BFLAUXN62LF5A1PEXOI1Q9UTX" UNIQUE ("NAME");
ALTER TABLE "PUBLIC"."WORD"
    ADD CONSTRAINT "PUBLIC"."FKGOXHLJHA8FXBLY06SVO210LJ" FOREIGN KEY ("PARENT_WORD_NAME") REFERENCES "PUBLIC"."WORD" ("ID") NOCHECK;
ALTER TABLE "PUBLIC"."FORTHWORDS"
    ADD CONSTRAINT "PUBLIC"."FK6R5Y1XEMN44YELFD5VUUTHOPF" FOREIGN KEY ("WORD_ID") REFERENCES "PUBLIC"."WORD" ("ID") NOCHECK;
ALTER TABLE "PUBLIC"."WORD"
    ADD CONSTRAINT "PUBLIC"."FKPEVQ98N5Q80GKUHDF3YIK5SBA" FOREIGN KEY ("DICTIONARY_ID") REFERENCES "PUBLIC"."DICTIONARY" ("ID") NOCHECK;
