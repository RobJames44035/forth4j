/*
 * Copyright 2024 Robert A. James
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Copyright 2024 Robert A. James
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

-- H2 2.2.220;
SET DB_CLOSE_DELAY -1;
;
CREATE USER IF NOT EXISTS "SA" SALT '91a830146e79bb08' HASH 'b6ae80219a8f0ac3f9ea2370d61cee41e88e286684f44a82929639aae6c5636c' ADMIN;
CREATE SEQUENCE "PUBLIC"."HIBERNATE_SEQUENCE" START WITH 1 RESTART WITH 29;
CREATE MEMORY TABLE "PUBLIC"."DICTIONARY"
(
    "ID" INTEGER NOT NULL,
    "NAME" CHARACTER VARYING(255)
);
ALTER TABLE "PUBLIC"."DICTIONARY"
    ADD CONSTRAINT "PUBLIC"."CONSTRAINT_3" PRIMARY KEY ("ID");
-- 1 +/- SELECT COUNT(*) FROM PUBLIC.DICTIONARY;               
INSERT INTO "PUBLIC"."DICTIONARY"
VALUES (1, 'Core');
CREATE MEMORY TABLE "PUBLIC"."FORTHWORDS"
(
    "WORD_ID" BIGINT NOT NULL,
    "FORTH_WORD_NAME" CHARACTER VARYING(255)
);      
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.FORTHWORDS;               
CREATE MEMORY TABLE "PUBLIC"."WORD"
(
    "ID"              BIGINT                 NOT NULL,
    "ARGUMENTCOUNT" INTEGER,
    "COMPILEONLY"     BOOLEAN,
    "COMPILERDIRECTIVE" CHARACTER VARYING,
    "CONTROLWORD" BOOLEAN,
    "CREATEDATETIME" TIMESTAMP,
    "NAME"            CHARACTER VARYING(255) NOT NULL,
    "RUNTIMEBEHAVIOR" CHARACTER VARYING,
    "STACKVALUE"      INTEGER,
    "STRINGLITERAL" CHARACTER VARYING(255),
    "VERSION"         INTEGER                NOT NULL,
    "DICTIONARY_ID"   INTEGER                NOT NULL,
    "PARENT_WORD_NAME" BIGINT
);
ALTER TABLE "PUBLIC"."WORD"
    ADD CONSTRAINT "PUBLIC"."CONSTRAINT_2" PRIMARY KEY ("ID");
-- 27 +/- SELECT COUNT(*) FROM PUBLIC.WORD;    
INSERT INTO "PUBLIC"."WORD"
VALUES (2, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.201', 'noop', NULL, NULL, NULL, 0, 1, NULL),
       (3, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.255', 'nop', NULL, NULL, NULL, 0, 1, NULL),
       (4, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.308', 'defdump',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Dump extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Word dumpWord = interpreter?.words?.remove()\000a        println(dumpWord.toString())\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (5, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.339', '+',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Plus extends AbstractRuntime {\000a\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() + interpreter.dataStack.pop())\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (6, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.364', '-',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Minus extends AbstractRuntime {\000a\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() - interpreter.dataStack.pop())\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (7, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.388', '.',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Dot extends AbstractRuntime {\000a\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        print(interpreter.dataStack.pop())\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (8, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.407', 'cr',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Cr extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        println()\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (9, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.428', 'emit',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Emit extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        print((char) interpreter.dataStack.pop())\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (10, 0, FALSE,
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage compiler\000a\000a\000aimport com.rajames.forth.compiler.AbstractCompilerDirective\000aimport com.rajames.forth.compiler.ForthCompiler\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.springframework.transaction.annotation.Transactional\000a\000aimport java.util.concurrent.ConcurrentLinkedQueue\000a\000aclass DotQuoteC extends AbstractCompilerDirective {\000a\000a    @Override\000a    @Transactional\000a    Boolean execute(Word word, ForthCompiler compiler, ForthInterpreter interpreter) {\000a        ConcurrentLinkedQueue<Word> words = interpreter.words\000a        ConcurrentLinkedQueue<String> nonWords = interpreter.nonWords\000a        Word nextWord = null\000a        try {\000a            nextWord = words.remove()\000a        } catch (Exception ignored) {\000a        }\000a        while (!nonWords.isEmpty()) {\000a            String stringLiteral = nonWords.remove()\000a            if (stringLiteral == "\\"") {\000a                break\000a            }\000a            Word literal = compiler.literal\000a            Word wordLiteral = new Word()\000a            wordLiteral.name = "str_${literal.name}_${UUID.randomUUID().toString()}"\000a            wordLiteral.runtimeClass = literal.runtimeClass\000a            wordLiteral.stringLiteral = stringLiteral - "\\""\000a            wordLiteral.compileOnly = true\000a            wordLiteral.dictionary = compiler.dictionary\000a            wordLiteral.parentWord = compiler.newWord\000a            compiler.wordService.save(wordLiteral)\000a\000a            compiler.forthWordsBuffer.add(wordLiteral.name)\000a            if (stringLiteral.endsWith("\\"")) {\000a                break\000a            }\000a        }\000a        if (nextWord != null) {\000a            compiler.forthWordsBuffer.add(nextWord.name)\000a        }\000a        return false\000a    }\000a}\000a',
        FALSE, TIMESTAMP '2024-02-06 11:57:16.464', '."',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aimport java.util.concurrent.ConcurrentLinkedDeque\000a\000aclass DotQuote extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        ConcurrentLinkedDeque<String> tokens = interpreter.nonWords\000a        while (!tokens.isEmpty()) {\000a            String token = tokens.remove()\000a            print(token.replaceAll("\\"", "") + " ")\000a        }\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (11, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.493', '0<',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass LessThanZero extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() < 0 ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (12, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.515', '0=',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass EqualZero extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() == 0 ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (13, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.54', '0=',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass GreaterThanZero extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() > 0 ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (14, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.563', '1+',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass OnePlus extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() + 1)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (15, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.585', '1-',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass OneMinus extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() - 1)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (16, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.61', '2+',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass TwoPlus extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() + 2)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (17, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.635', '2-',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass TwoMinus extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() - 2)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (18, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.662', '2*',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass TwoTimes extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() * 2)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (19, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.686', '2/',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass TwoDivide extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() / 2)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (20, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.716', '<',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass LessThan extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push((interpreter.dataStack.pop() < interpreter.dataStack.pop()) ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (21, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.739', '>',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass GreaterThan extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push((interpreter.dataStack.pop() > interpreter.dataStack.pop()) ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (22, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.765', '=',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Equal extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push((interpreter.dataStack.pop() == interpreter.dataStack.pop()) ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (23, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.788', ':',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.compiler.ForthCompilerException\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.apache.logging.log4j.LogManager\000aimport org.apache.logging.log4j.Logger\000a\000aimport java.util.concurrent.ConcurrentLinkedQueue\000a\000aclass Colon extends AbstractRuntime {\000a\000a    private static final Logger log = LogManager.getLogger(this.class.getName())\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        // Fail Fast\000a        if (interpreter.words.stream().noneMatch(w -> w.getName().equals(";"))) {\000a            interpreter.words.clear()\000a            interpreter.nonWords.clear()\000a            throw new ForthCompilerException("No ending semicolon")\000a        }\000a\000a        ConcurrentLinkedQueue<String> nonWords = interpreter.nonWords\000a        ConcurrentLinkedQueue<Word> words = interpreter.words\000a        ConcurrentLinkedQueue<Integer> arguments = new ConcurrentLinkedQueue<>()\000a\000a        while (interpreter.dataStack.size() > 0) {\000a            Integer argument = interpreter.dataStack.pop() as Integer\000a            arguments.add(argument)\000a        }\000a\000a        // Invoke the compiler\000a        interpreter.forthCompiler.compileWord(words, arguments, nonWords)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (24, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.811', ';', NULL, NULL, NULL, 0, 1, NULL),
       (25, 0, TRUE, NULL, FALSE, TIMESTAMP '2024-02-06 11:57:16.845', 'literal',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Literal extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a\000a        // Code goes here\000a        if (word.name.startsWith("int_")) {\000a            Word lit = word\000a            Integer arg = lit.stackValue\000a            interpreter.dataStack.push(arg)\000a        } else if (word.name.startsWith("str_")) {\000a            Word lit = word\000a            String string = lit.stringLiteral\000a            if (string != "\\"") {\000a                print(word.stringLiteral.replaceAll("\\"", "") + " ")\000a            }\000a        }\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (26, 1, TRUE,
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.compiler\000a//    : ?full 12 = if ." It''s full " else ." NOT full " then ." Finished! " ;\000a//    : ?full 12 = if ." It''s full " then ;\000a\000aimport com.rajames.forth.compiler.AbstractCompilerDirective\000aimport com.rajames.forth.compiler.CompilerDirective\000aimport com.rajames.forth.compiler.ForthCompiler\000aimport com.rajames.forth.compiler.ForthCompilerException\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.apache.logging.log4j.LogManager\000aimport org.apache.logging.log4j.Logger\000a\000aclass IfC extends AbstractCompilerDirective {\000a\000a    private static final Logger log = LogManager.getLogger(this.class.getName())\000a\000a    ForthCompiler compiler\000a    ForthInterpreter interpreter\000a    @Override\000a    Boolean execute(Word newWord, ForthCompiler compiler, ForthInterpreter interpreter) {\000a        this.compiler = compiler\000a        this.interpreter = interpreter\000a\000a        if (!interpreter.line.contains("if")) {\000a            interpreter.words.clear()\000a            interpreter.nonWords.clear()\000a            throw new ForthCompilerException("No matching ''IF for ''ELSE")\000a        }\000a\000a        if (!interpreter.line.contains("then")) {\000a            interpreter.words.clear()\000a            interpreter.nonWords.clear()\000a            throw new ForthCompilerException("No matching ''THEN for ''ELSE")\000a        }\000a\000a        runup()\000a\000a        while (!this.interpreter.tokensCopy.isEmpty()) {\000a            String token = this.interpreter.tokensCopy.remove()\000a            Word thenWord = this.compiler.wordService.findByName("then")\000a            Word elseWord = this.compiler.wordService.findByName("else")\000a            if (token == thenWord.name || token == elseWord.name) {\000a                if (token == thenWord.name) {\000a                    this.compiler.forthWordsBuffer.add(thenWord.name)\000a                    this.interpreter.words.remove()\000a                    break\000a                }\000a                if (token == elseWord.name) {\000a                    def classLoader = new GroovyClassLoader()\000a                    Class groovyClass = classLoader.parseClass(elseWord.compileClass)\000a                    CompilerDirective compileTime = groovyClass.getDeclaredConstructor().newInstance() as CompilerDirective\000a                    def output = compileTime.execute(this.compiler.newWord, this.compiler, this.interpreter)\000a                    break\000a                }\000a            } else {\000a                Word word = this.compiler.wordService.findByName(token)\000a                try {\000a                    this.interpreter.words.remove()\000a                } catch (Exception ignored) {\000a                    break\000a                }\000a\000a                if (word) {\000a                    this.compiler.forthWordsBuffer.add(word.name)\000a                    if (word.compileClass) {\000a                        def classLoader = new GroovyClassLoader()\000a                        Class groovyClass = classLoader.parseClass(word.compileClass)\000a                        CompilerDirective compileTime = groovyClass.getDeclaredConstructor().newInstance() as CompilerDirective\000a                        def output = compileTime.execute(this.compiler.newWord, this.compiler, this.interpreter)\000a                    }\000a                }\000a            }\000a        }\000a        return false\000a    }\000a\000a    private void runup() {\000a        // remove all tokens from the tokensCopy up to "if"\000a        while (!this.interpreter.tokensCopy.isEmpty()) {\000a            String token = this.interpreter.tokensCopy.remove()\000a            Word ifWord = this.compiler.wordService.findByName("if")\000a            if (ifWord.name == token) {\000a                // add "if" to the list of forthWordsBuffer\000a                this.compiler.forthWordsBuffer.add(ifWord.name)\000a                break\000a            }\000a        }\000a    }\000a\000a    private Word compileLiteral(String token) {\000a        Word wordLiteral = new Word()\000a        String uniqueId = UUID.randomUUID().toString().replaceAll("-", "")\000a        try {\000a            // Integer literals\000a            Integer i = Integer.parseInt(token)\000a            wordLiteral.name = "int_${this.compiler.literal.name}_${uniqueId}"\000a            wordLiteral.stackValue = i\000a        } catch (NumberFormatException ignored) {\000a            // string literal\000a            wordLiteral.name = "str_${this.compiler.literal.name}_${uniqueId}"\000a            wordLiteral.stringLiteral = token\000a        }\000a        wordLiteral.runtimeClass = this.compiler.literal.runtimeClass\000a        wordLiteral.compileOnly = true\000a        wordLiteral.dictionary = this.compiler.dictionary\000a        wordLiteral.parentWord = this.compiler.newWord\000a        this.compiler.wordService.save(wordLiteral)\000a        return wordLiteral\000a    }\000a}\000a',
        TRUE, TIMESTAMP '2024-02-06 11:57:16.881', 'if',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass If extends AbstractRuntime {\000a// : test 5 = if ." Five " else ." Not Five " then ;\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer conditionValue = interpreter.dataStack.pop() as Integer\000a        Integer elseIndex = parentWord.forthWords.indexOf("else")\000a        Integer thenIndex = parentWord.forthWords.indexOf("then")\000a\000a        if (conditionValue == 0 && elseIndex > -1 && elseIndex < thenIndex) {\000a            parentWord.executionIndex = elseIndex // Skip to ''else''\000a        } else if (conditionValue == 0 && thenIndex > -1) { // If the condition is false\000a            parentWord.executionIndex = thenIndex // Skip to ''then''\000a        }\000a        // If the condition is true, do nothing here and let the normal execution flow\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (27, 0, TRUE,
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.compiler\000a\000a\000aimport com.rajames.forth.compiler.AbstractCompilerDirective\000aimport com.rajames.forth.compiler.CompilerDirective\000aimport com.rajames.forth.compiler.ForthCompiler\000aimport com.rajames.forth.compiler.ForthCompilerException\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.apache.logging.log4j.LogManager\000aimport org.apache.logging.log4j.Logger\000a\000aclass ElseC extends AbstractCompilerDirective {\000a\000a    private static final Logger log = LogManager.getLogger(this.class.getName())\000a\000a    ForthCompiler compiler\000a    ForthInterpreter interpreter\000a\000a    @Override\000a    Boolean execute(Word newWord, ForthCompiler compiler, ForthInterpreter interpreter) {\000a        this.compiler = compiler\000a        this.interpreter = interpreter\000a\000a        if (!interpreter.line.contains("if")) {\000a            interpreter.words.clear()\000a            interpreter.nonWords.clear()\000a            throw new ForthCompilerException("No matching ''IF for ''ELSE")\000a        }\000a\000a        if (!interpreter.line.contains("then")) {\000a            interpreter.words.clear()\000a            interpreter.nonWords.clear()\000a            throw new ForthCompilerException("No matching ''THEN for ''ELSE")\000a        }\000a\000a        while (!this.interpreter.tokensCopy.isEmpty()) {\000a            String token = this.interpreter.tokensCopy.poll()\000a            Word thenWord = this.compiler.wordService.findByName("then")\000a\000a            Word word = this.compiler.wordService.findByName(token)\000a\000a            if (word) {\000a                this.compiler.forthWordsBuffer.add(word.name)\000a                if (word.compileClass) {\000a                    def classLoader = new GroovyClassLoader()\000a                    Class groovyClass = classLoader.parseClass(word.compileClass)\000a                    CompilerDirective compileTime = groovyClass.getDeclaredConstructor().newInstance() as CompilerDirective\000a                    def output = compileTime.execute(this.compiler.newWord, this.compiler, this.interpreter)\000a                }\000a            }\000a\000a        }\000a        while(compiler.forthWordsBuffer.contains(";")) {\000a            compiler.forthWordsBuffer.remove(";")\000a        }\000a        return false\000a    }\000a\000a}',
        TRUE, TIMESTAMP '2024-02-06 11:57:16.906', 'else',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Else extends AbstractRuntime {\000a// : test 5 = if ." Five " else ." Not Five " then ;\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer thenIndex = parentWord.forthWords.indexOf("then") // When ''else'' is hit during execution, always skip to ''then''\000a        if(thenIndex > 0) {\000a            parentWord.executionIndex = thenIndex\000a        }\000a        return null\000a    }\000a}\000a\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (28, 0, TRUE, NULL, TRUE, TIMESTAMP '2024-02-06 11:57:16.939', 'then', NULL, NULL, NULL, 0, 1, NULL);
CREATE INDEX "PUBLIC"."WORD_NAME_INDEX" ON "PUBLIC"."WORD" ("NAME" NULLS FIRST);
ALTER TABLE "PUBLIC"."DICTIONARY"
    ADD CONSTRAINT "PUBLIC"."UK_BFLAUXN62LF5A1PEXOI1Q9UTX" UNIQUE ("NAME");
ALTER TABLE "PUBLIC"."WORD"
    ADD CONSTRAINT "PUBLIC"."FKGOXHLJHA8FXBLY06SVO210LJ" FOREIGN KEY ("PARENT_WORD_NAME") REFERENCES "PUBLIC"."WORD" ("ID") NOCHECK;
ALTER TABLE "PUBLIC"."FORTHWORDS"
    ADD CONSTRAINT "PUBLIC"."FK6R5Y1XEMN44YELFD5VUUTHOPF" FOREIGN KEY ("WORD_ID") REFERENCES "PUBLIC"."WORD" ("ID") NOCHECK;
ALTER TABLE "PUBLIC"."WORD"
    ADD CONSTRAINT "PUBLIC"."FKPEVQ98N5Q80GKUHDF3YIK5SBA" FOREIGN KEY ("DICTIONARY_ID") REFERENCES "PUBLIC"."DICTIONARY" ("ID") NOCHECK;
