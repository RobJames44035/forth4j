/*
 * Copyright 2024 Robert A. James
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

-- H2 2.2.220;
SET DB_CLOSE_DELAY -1;
;
CREATE USER IF NOT EXISTS "SA" SALT '6cd387df1d88b3fa' HASH 'cf0484ea0b943d3b02a0b64b814a7e6f268fd9ce454641cc89efd3a2f33c502e' ADMIN;
CREATE SEQUENCE "PUBLIC"."HIBERNATE_SEQUENCE" START WITH 1 RESTART WITH 54;
CREATE MEMORY TABLE "PUBLIC"."BLOCK"
(
    "ID"             INTEGER NOT NULL,
    "BLOCKNUMBER"    INTEGER,
    "BYTES"          BINARY LARGE OBJECT,
    "CREATEDATETIME" TIMESTAMP,
    "VERSION"        INTEGER NOT NULL
);
ALTER TABLE "PUBLIC"."BLOCK"
    ADD CONSTRAINT "PUBLIC"."CONSTRAINT_3" PRIMARY KEY ("ID");
-- 1 +/- SELECT COUNT(*) FROM PUBLIC.BLOCK;    
INSERT INTO "PUBLIC"."BLOCK"
VALUES (53, 0,
        X'002a
        NULL, 1);
CREATE INDEX "PUBLIC"."INDEX_BLOCKNUMBER" ON "PUBLIC"."BLOCK" ("BLOCKNUMBER" NULLS FIRST);
CREATE MEMORY TABLE "PUBLIC"."DICTIONARY"
(
    "ID"             INTEGER NOT NULL,
    "CREATEDATETIME" TIMESTAMP,
    "NAME"           CHARACTER VARYING(255),
    "VERSION"        INTEGER NOT NULL
);
ALTER TABLE "PUBLIC"."DICTIONARY"
    ADD CONSTRAINT "PUBLIC"."CONSTRAINT_37" PRIMARY KEY ("ID");
-- 1 +/- SELECT COUNT(*) FROM PUBLIC.DICTIONARY;               
INSERT INTO "PUBLIC"."DICTIONARY"
VALUES (1, TIMESTAMP '2024-02-11 12:08:12.862', 'Core', 0);
CREATE MEMORY TABLE "PUBLIC"."FORTHWORDS"
(
    "WORD_ID"         BIGINT NOT NULL,
    "FORTH_WORD_NAME" CHARACTER VARYING(255)
);
-- 8 +/- SELECT COUNT(*) FROM PUBLIC.FORTHWORDS;               
INSERT INTO "PUBLIC"."FORTHWORDS"
VALUES (47, 'int_literal_f27e0c37b7c7-482e-a4e4-72fcd3f1a55b'),
       (47, 'int_literal_505989d3ad31-4f59-b8db-d2f125a9a9e9'),
       (47, '!'),
       (50, 'int_literal_22ed443d1796-4897-bc3c-820ac57c8ecb'),
       (50, '@'),
       (50, 'emit'),
       (52, 'test1'),
       (52, 'test2');
CREATE MEMORY TABLE "PUBLIC"."WORD"
(
    "ID"                BIGINT                 NOT NULL,
    "ARGUMENTCOUNT"     INTEGER,
    "COMPILEONLY"       BOOLEAN,
    "COMPILERDIRECTIVE" CHARACTER VARYING,
    "CONTROLWORD"       BOOLEAN,
    "CREATEDATETIME"    TIMESTAMP,
    "NAME"              CHARACTER VARYING(255) NOT NULL,
    "RUNTIMEBEHAVIOR"   CHARACTER VARYING,
    "STACKVALUE"        INTEGER,
    "STRINGLITERAL"     CHARACTER VARYING(255),
    "VERSION"           INTEGER                NOT NULL,
    "DICTIONARY_ID"     INTEGER                NOT NULL,
    "PARENT_WORD_NAME"  BIGINT
);
ALTER TABLE "PUBLIC"."WORD"
    ADD CONSTRAINT "PUBLIC"."CONSTRAINT_2" PRIMARY KEY ("ID");
-- 51 +/- SELECT COUNT(*) FROM PUBLIC.WORD;    
INSERT INTO "PUBLIC"."WORD"
VALUES (2, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.166', 'noop', NULL, NULL, NULL, 0, 1, NULL),
       (3, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.211', 'nop', NULL, NULL, NULL, 0, 1, NULL),
       (4, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.253', 'defdump',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport com.rajames.forth.runtime.ForthInterpreterException\000a\000aclass DefDump extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        try {\000a            Word dumpWord = interpreter?.words?.remove()\000a            println(dumpWord.toString())\000a        } catch(NoSuchElementException e) {\000a            throw new ForthInterpreterException("No such word.")\000a        }\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (5, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.272', 'save-forth',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.springframework.transaction.annotation.Transactional\000a\000aclass SaveForth extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a    @Transactional\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.flushService.flush()\000a        interpreter.databaseBackupService.backupDatabase(null, null)\000a        interpreter.flushService.flush()\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (6, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.294', 'load-forth',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.springframework.transaction.annotation.Transactional\000a\000aclass LoadForth extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a    @Transactional\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.flushService.flush()\000a        interpreter.databaseBackupService.loadDatabase(null, null)\000a        interpreter.flushService.flush()\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (7, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.329', '+',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Plus extends AbstractRuntime {\000a\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() + interpreter.dataStack.pop())\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (8, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.355', '-',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Minus extends AbstractRuntime {\000a\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() - interpreter.dataStack.pop())\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (9, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.379', '.',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Dot extends AbstractRuntime {\000a\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        print(interpreter.dataStack.pop())\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (10, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.407', 'cr',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Cr extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        println()\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (11, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.433', 'emit',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Emit extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        print((char) interpreter.dataStack.pop())\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (12, 0, FALSE,
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.compiler\000a\000a\000aimport com.rajames.forth.compiler.AbstractCompilerDirective\000aimport com.rajames.forth.compiler.ForthCompiler\000aimport com.rajames.forth.compiler.ForthCompilerException\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.springframework.transaction.annotation.Transactional\000a\000aimport java.util.concurrent.ConcurrentLinkedQueue\000a\000a// : test 2 + ." adding x + 2 = " . cr ." Done!" ;\000aclass DotQuoteC extends AbstractCompilerDirective {\000a\000a\000a    public static final String QUOTATION_MARK = "\\""\000a\000a    @Override\000a    @Transactional\000a    Boolean execute(Word word, ForthCompiler compiler, ForthInterpreter interpreter) {\000a        ConcurrentLinkedQueue<Word> words = interpreter.words\000a        StringBuilder sb = new StringBuilder()\000a        Word nextWord = null\000a        try {\000a            compiler.forthWordsBuffer.add(word.name)\000a            while (!compiler.tokens.isEmpty()) {\000a                String token = compiler.tokens.poll()\000a                if (token == QUOTATION_MARK) {\000a                    break\000a                }\000a                if (token.endsWith(QUOTATION_MARK)) {\000a                    sb.append(token)\000a                    break\000a                }\000a\000a                sb.append(token).append(" ")\000a            }\000a            String stringLiteral = sb.toString()\000a            compiler.compileLiteral(stringLiteral)\000a        } catch (Exception e) {\000a            throw new ForthCompilerException("${this.class.simpleName} failed.", e)\000a        }\000a        return false\000a    }\000a\000a}\000a',
        FALSE, TIMESTAMP '2024-02-11 12:08:13.464', '."', NULL, NULL, NULL, 0, 1, NULL),
       (13, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.489', '0<',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass LessThanZero extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() < 0 ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (14, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.52', '0=',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass EqualZero extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() == 0 ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (15, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.541', '0=',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass GreaterThanZero extends AbstractRuntime {\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() > 0 ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (16, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.566', '1+',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass OnePlus extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() + 1)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (17, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.59', '1-',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass OneMinus extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() - 1)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (18, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.611', '2+',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass TwoPlus extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() + 2)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (19, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.636', '2-',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass TwoMinus extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() - 2)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (20, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.665', '2*',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass TwoTimes extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() * 2)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (21, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.695', '2/',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass TwoDivide extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push(interpreter.dataStack.pop() / 2)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (22, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.717', '<',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass LessThan extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push((interpreter.dataStack.pop() < interpreter.dataStack.pop()) ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (23, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.741', '>',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass GreaterThan extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push((interpreter.dataStack.pop() > interpreter.dataStack.pop()) ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (24, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.763', '=',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Equal extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.push((interpreter.dataStack.pop() == interpreter.dataStack.pop()) ? -1 : 0)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (25, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.784', 'spaces',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Spaces extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer spaces = interpreter.dataStack.pop() as Integer\000a        (0..<spaces).each {\000a            print(" ")\000a        }\000a        return false\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (26, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.806', 'dup',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Dup extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer i = interpreter.dataStack.pop() as Integer\000a        interpreter.dataStack.push(i)\000a        interpreter.dataStack.push(i)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (27, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.829', 'drop',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Drop extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        interpreter.dataStack.pop()\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (28, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.848', ':',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.compiler.ForthCompilerException\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.apache.logging.log4j.LogManager\000aimport org.apache.logging.log4j.Logger\000a\000aclass Colon extends AbstractRuntime {\000a\000a    private static final Logger log = LogManager.getLogger(this.class.getName())\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        // Fail Fast\000a        if (!interpreter.line.endsWith(";"))\000a            throw new ForthCompilerException("No matching '';'' for '':''")\000a        // Invoke the compiler\000a        interpreter.forthCompiler.compile(interpreter.line)\000a        interpreter.tokens.clear()\000a        interpreter.words.clear()\000a\000a        //Not too sure about this but...\000a        interpreter.dataStack.clear()\000a        interpreter.returnStack.clear()\000a        // Revisit if needed\000a\000a        interpreter.word = null\000a        interpreter.line = null\000a        interpreter.instructionPointer = 0\000a        return false\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (29, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.869', ';', NULL, NULL, NULL, 0, 1, NULL),
       (30, 0, TRUE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:13.902', 'literal',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Literal extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a\000a        // Code goes here\000a        if (word.name.startsWith("int_")) {\000a            Word lit = word\000a            Integer arg = lit.stackValue\000a            interpreter.dataStack.push(arg)\000a        } else if (word.name.startsWith("str_")) {\000a            Word lit = word\000a            String string = lit.stringLiteral\000a            if (string != "\\"") {\000a                print(word.stringLiteral.replaceAll("\\"", "") + " ")\000a            }\000a        }\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (31, 1, TRUE,
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000a/*\000a * The "IfC" class is an integral part of the compilation process of the Forth-like language interpreter.\000a * This class extends from "AbstractCompilerDirective" which forms the foundation for all the compiler directive classes.\000a *\000a * The compile-time mechanism analyzes and translates the defined Forth terms during the parsing process.\000a * For the ''IF'', ''THEN'', ''ELSE'' words, they are registered into the dictionary associated with their respective compiler directive\000a * classes (in this case, the ''IfC'' class for ''IF'').\000a *\000a * The ''IfC'' class, through its ''execute'' method, modifies the source code under interpretation to a more executable form.\000a * The ''execute'' method extracts all the tokens corresponding to a conditional control structure starting from ''IF'' and ending\000a * with ''THEN'', while properly handling the optional ''ELSE'' case as well.\000a * Thus the method assembles these tokens into a manageable structure, ready for the runtime execution.\000a *\000a * This facilitates the use and implementation of ''IF'', ''ELSE'' and ''THEN'' control structures in the language, enhancing\000a * the versatility of the interpreted language.\000a *\000a * Our test cases included:\000a * : test1 5 = if ." Five " then ;\000a * : test2 5 = if ." Five " else ." Not Five " then ;\000a * : test3 dup test1 test2 ;\000a*/\000a\000apackage primitives_classes.compiler\000a\000aimport com.rajames.forth.compiler.AbstractCompilerDirective\000aimport com.rajames.forth.compiler.CompilerDirective\000aimport com.rajames.forth.compiler.ForthCompiler\000aimport com.rajames.forth.compiler.ForthCompilerException\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.apache.logging.log4j.LogManager\000aimport org.apache.logging.log4j.Logger\000a\000aimport java.util.concurrent.ConcurrentLinkedQueue\000a\000a/**\000a * The ''IfC'' class extends the ''AbstractCompilerDirective'' super class.\000a * This compiler directive class handles the logic of the ''IF'' keyword at compile time in the interpreter.\000a */\000aclass IfC extends AbstractCompilerDirective {\000a\000a    private static final Logger log = LogManager.getLogger(this.class.getName())\000a\000a    ForthCompiler compiler\000a    ForthInterpreter interpreter\000a\000a/**\000a * The `execute` method is responsible for performing the compile-time operations for ''IF'' in the Forth compiler.\000a *\000a * @param newWord The word that is being compiled.\000a * @param compiler The ForthCompiler instance.\000a * @param interpreter The ForthInterpreter instance.\000a * @return Boolean indicating if a new line needs to be printed or not in the Forth REPL.\000a * @exception ForthCompilerException if there''s no matching ''IF'' or ''THEN'' for ''ELSE''.\000a */\000a    @Override\000a    Boolean execute(Word word, ForthCompiler compiler, ForthInterpreter interpreter) {\000a        ConcurrentLinkedQueue<Word> words = interpreter.words\000a        Word nextWord = null\000a        // Fail Fast\000a        if (!compiler.tokens.contains("then")) {\000a            interpreter.words.clear()\000a            throw new ForthCompilerException("No matching ''THEN''")\000a        }\000a        if (compiler.tokens.contains("else") && !compiler.tokens.contains("then")) {\000a            interpreter.words.clear()\000a            throw new ForthCompilerException("No matching ''THEN for ''ELSE")\000a        }\000a\000a        try {\000a            compiler.forthWordsBuffer.add(word.name)\000a            while (!compiler.tokens.isEmpty()) {\000a                String token = compiler.tokens.poll()\000a                if (token == "then") {\000a                    compiler.forthWordsBuffer.add(token)\000a                    break\000a                }\000a\000a                nextWord = compiler.wordService.findByName(token)\000a                if (nextWord != null) {\000a                    // if nextWord has a defined compiler directive we need to insure it''s executed as well.\000a                    if (nextWord.compileClass != null && !nextWord.compileClass.isEmpty() && !nextWord.compileClass.isBlank()) {\000a                        def classLoader = new GroovyClassLoader()\000a                        Class groovyClass = classLoader.parseClass(nextWord.compileClass)\000a                        CompilerDirective compileTime = groovyClass.getDeclaredConstructor().newInstance() as CompilerDirective\000a                        Boolean output = compileTime.execute(nextWord, compiler, interpreter)\000a                        continue\000a                    }\000a                    compiler.forthWordsBuffer.add(nextWord.name)\000a                } else if (compiler.canParseToInt(token)) {\000a                    compiler.compileIntegerLiteral(token)\000a                }\000a            }\000a        } catch (Exception e) {\000a            throw new ForthCompilerException("${this.class.simpleName} failed.", e)\000a        }\000a        return false\000a    }\000a}\000a',
        TRUE, TIMESTAMP '2024-02-11 12:08:13.957', 'if',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000a/*\000a * The "If" class is an integral part of the runtime mechanism of the Forth-like language interpreter.\000a * This class extends from "AbstractRuntime", the abstract class that forms the base for all the runtime classes.\000a *\000a * The runtime mechanism undertakes the actual execution of the Forth words during the interpretation process.\000a * During the parsing and compilation stage, Forth words are identified and formed into a list of words (word list) within each ''Word'' object.\000a * For words like ''IF'', they are registered into the dictionary with their corresponding runtime classes (in this case, the ''If'' class).\000a *\000a * When the interpreter encounters a defined Word during the interpretation process, it looks up the associated runtime object and calls its ''execute'' method.\000a *\000a * In the ''If'' class, the overridden ''execute'' method implements the behavior for the ''IF'' control structure of the language, including handling ''ELSE'' and ''THEN'' cases.\000a * Here''s how it happens:\000a * - Pop the top element from the data stack and consider it as a condition value.\000a * -  If the condition value equals 0 (i.e. is false) then depending upon the existence and location of an ''ELSE'' command,\000a *     either skip over the commands before ''ELSE'' or skip over all commands till ''THEN''.\000a * - If the condition value does not equal 0 (i.e. is true), let the normal execution flow continue which means execute all commands till ''ELSE'' is encountered.\000a *     If ''ELSE'' is encountered, skip to ''THEN''.\000a *\000a * This mechanism enables the use of ''IF'', ''ELSE'' and ''THEN'' control structures in the language.\000a *\000a * Our test cases included:\000a * : test1 5 = if ." Five " then ;\000a * : test2 5 = if ." Five " else ." Not Five " then ;\000a */\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000a/**\000a * The ''If'' class extends the ''AbstractRuntime'' super class.\000a * It handles the logic of the ''IF'' keyword in the interpreter.\000a */\000aclass If extends AbstractRuntime {\000a\000a    /**\000a     * The `execute` method is responsible for executing the ''IF'' operation in the forth interpreter.\000a     * It takes in the interpreter, the ''IF'' keyword and the parent word in which the ''IF'' keyword\000a     * is used as parameters.\000a     *\000a     * @param interpreter The ForthInterpreter Spring bean\000a     * @param word The word that is being interpreted.\000a     * @param parentWord The word from which ''IF'' is being executed.\000a     * @return Will ''normaly'' be Boolean true or false indicating if ForthRepl should print a new line.\000a     */\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        // The value popped from the data stack is used as the condition for the ''IF'' statement.\000a        Integer conditionValue = interpreter.dataStack.pop() as Integer\000a\000a        // Find the indices of ''ELSE'' and ''THEN'' command in parent word''s forthWords list\000a        Integer elseIndex = parentWord.forthWords.indexOf("else")\000a        Integer thenIndex = parentWord.forthWords.indexOf("then")\000a\000a        // If the condition value equals 0 (i.e. is false), and the index of ''ELSE'' command is between the ''IF''\000a        // and ''THEN'' commands,\000a        // then it sets the execution index to the elseIndex, thus skips the commands before ''ELSE'' block.\000a        if (conditionValue == 0 && elseIndex > -1 && elseIndex < thenIndex) {\000a            parentWord.executionIndex = elseIndex // Skip to ''else''\000a        }\000a\000a        // If the condition value equals 0 and the ''ELSE'' command does not exist or is located after the ''THEN'' command,\000a        // then it sets the execution index to the thenIndex, thus skips the commands before ''THEN'' block.\000a        else if (conditionValue == 0 && thenIndex > -1) { // If the condition is false\000a            parentWord.executionIndex = thenIndex // Skip to ''then''\000a        }\000a\000a        // When the condition is true or false, it does nothing,\000a        // allowing the normal execution flow to continue until an `ELSE` is encountered.\000a        // It is currently just a flag to pass to ForthRepl indicating it should or should not\000a        // print a newline at the end of execution.\000a        // Since it is an object we can return something to the interpreter under special\000a        // circumstances, BUT the interpreter must still return a proper Boolean value to ForthRepl.\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (32, 0, TRUE,
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000a\000a/*\000a * The class "ElseC" extends from "AbstractCompilerDirective", and is part of the compile-time mechanism for handling the ''ELSE''\000a * control structure in the Forth-like language interpreter.\000a *\000a * During the compilation process, the compiler directive associated with ''ELSE'' is activated upon encountering ''ELSE''.\000a * The ''ElseC'' class''s ''execute'' method processes all tokens following ''ELSE'' until it encounters ''THEN''.\000a * These tokens are sequentially translated into an executable form, to be interpreted by the runtime mechanism.\000a *\000a * Here is an example of how it''s used:\000a * If the current line being interpreted contains "if 10 = else", the execute() method would process everything after "else" until a ''THEN'' is found.\000a *\000a * A Note to developers: It helps to set a line breakpoint at the return statement and inspecting\000a * the compiler.forthWordsBuffer for correctness. This is what the ''newWord'' will `look like` once saved\000a * to the dictionary.\000a *\000a */\000apackage primitives_classes.compiler\000a\000aimport com.rajames.forth.compiler.AbstractCompilerDirective\000aimport com.rajames.forth.compiler.CompilerDirective\000aimport com.rajames.forth.compiler.ForthCompiler\000aimport com.rajames.forth.compiler.ForthCompilerException\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.apache.logging.log4j.LogManager\000aimport org.apache.logging.log4j.Logger\000a\000aimport java.util.concurrent.ConcurrentLinkedQueue\000a\000a/**\000a * The ''ElseC'' class extends the ''AbstractCompilerDirective'' super class.\000a * This compiler directive class handles the logic of the ''ELSE'' keyword at compile time in the interpreter.\000a */\000aclass ElseC extends AbstractCompilerDirective {\000a\000a    private static final Logger log = LogManager.getLogger(this.class.getName())\000a\000a    ForthCompiler compiler\000a    ForthInterpreter interpreter\000a\000a    /**\000a     * The `execute` method is responsible for performing the compile-time operations for ''ELSE'' in the\000a     * Forth compiler.\000a     *\000a     * @param newWord The word that is being compiled.\000a     * @param compiler The ForthCompiler instance.\000a     * @param interpreter The ForthInterpreter instance.\000a     * @return Boolean indicating if a new line needs to be printed or not in Forth REPL.\000a     * @exception ForthCompilerException If there''s no matching ''IF'' or ''THEN'' for ''ELSE''.\000a     */\000a    @Override\000a    Boolean execute(Word word, ForthCompiler compiler, ForthInterpreter interpreter) {\000a        ConcurrentLinkedQueue<Word> words = interpreter.words\000a        Word nextWord = null\000a\000a        if (!compiler.tokens.contains("then")) {\000a            interpreter.words.clear()\000a            throw new ForthCompilerException("No matching ''THEN''")\000a        }\000a\000a        try {\000a            compiler.forthWordsBuffer.add(word.name)\000a            while (!compiler.tokens.isEmpty()) {\000a                String token = compiler.tokens.poll()\000a                if (token == "then") {\000a                    compiler.forthWordsBuffer.add(token)\000a                    break\000a                }\000a\000a                nextWord = compiler.wordService.findByName(token)\000a                if (nextWord != null) {\000a                    // if nextWord has a defined compiler directive we need to insure it''s executed as well.\000a                    if (nextWord.compileClass != null && !nextWord.compileClass.isEmpty() && !nextWord.compileClass.isBlank()) {\000a                        def classLoader = new GroovyClassLoader()\000a                        Class groovyClass = classLoader.parseClass(nextWord.compileClass)\000a                        CompilerDirective compileTime = groovyClass.getDeclaredConstructor().newInstance() as CompilerDirective\000a                        Boolean output = compileTime.execute(nextWord, compiler, interpreter)\000a                        continue\000a                    }\000a                    compiler.forthWordsBuffer.add(nextWord.name)\000a                } else if (compiler.canParseToInt(token)) {\000a                    compiler.compileIntegerLiteral(token)\000a                }\000a            }\000a        } catch (Exception e) {\000a            throw new ForthCompilerException("${this.class.simpleName} failed.", e)\000a        }\000a        return false\000a    }\000a}',
        TRUE, TIMESTAMP '2024-02-11 12:08:13.979', 'else',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000a/*\000a * The "Else" class is part of the runtime mechanism of the Forth-like language interpreter.\000a * This class extends from "AbstractRuntime", the abstract class that forms the base for all runtime classes.\000a *\000a * This class handles the ''ELSE'' keyword. During normal execution, when ''IF'' block is entered, and ''ELSE'' command\000a * is encountered, execution is always skipped to ''THEN'' excluding the instructions between ''ELSE'' and ''THEN'' from execution.\000a * This happens whether or not the condition for ''IF'' was true or false.\000a *\000a * The presence of the commands ''IF'', ''ELSE'', and ''THEN'' introduces the concept of nested execution control into the language,\000a * thereby providing programmers using the language with greater flexibility in designing their code.\000a *\000a * The word example given below demonstrates how a condition is tested and based on the result it selects a string to print.\000a * : test 5 = if ." Five " else ." Not Five " then ;\000a */\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000a/**\000a * The ''Else'' class extends the ''AbstractRuntime'' super class.\000a * It handles the logic of the ''ELSE'' keyword in the interpreter.\000a */\000aclass Else extends AbstractRuntime {\000a\000a    /**\000a     * The `execute` method is responsible for implementing the ''ELSE'' operation in the forth interpreter.\000a     * When an ''ELSE'' is encountered during execution, it skips the commands and jumps to the ''THEN'' command.\000a     *\000a     * @param interpreter The ForthInterpreter Spring bean\000a     * @param word The word that is being interpreted.\000a     * @param parentWord The word from which ''ELSE'' is being executed.\000a     * @return It will usually be null as this command represents a control structure rather than producing a value.\000a     */\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        // Find the index of ''THEN'' command in parent word''s forthWords list\000a        Integer thenIndex = parentWord.forthWords.indexOf("then")\000a\000a        // If ''ELSE'' is hit during execution, it always skips to ''THEN''\000a        if (thenIndex > 0) {\000a            parentWord.executionIndex = thenIndex\000a        }\000a\000a        // The ''else'' block does not produce a result by itself, so method returns null\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (33, 0, TRUE, NULL, TRUE, TIMESTAMP '2024-02-11 12:08:14.007', 'then', NULL, NULL, NULL, 0, 1, NULL),
       (34, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:14.034', 'i',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass I extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer limit = interpreter.returnStack.pop() as Integer\000a        Integer index = interpreter.returnStack.pop() as Integer\000a        interpreter.returnStack.push(index)\000a        interpreter.returnStack.push(limit)\000a        interpreter.dataStack.push(index)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (35, 2, TRUE,
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000a/*\000a * The "DoC" class is an integral part of the compilation process of the Forth-like language interpreter.\000a * This class extends from "AbstractCompilerDirective" which forms the foundation for all the compiler directive classes.\000a *\000a * The compile-time mechanism analyzes and translates the defined Forth terms during the parsing process.\000a *\000a * Our test cases included:\000a * : test 10 0 do cr ." hello " loop ;\000a*/\000a\000apackage primitives_classes.compiler\000a\000aimport com.rajames.forth.compiler.AbstractCompilerDirective\000aimport com.rajames.forth.compiler.CompilerDirective\000aimport com.rajames.forth.compiler.ForthCompiler\000aimport com.rajames.forth.compiler.ForthCompilerException\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.ForthInterpreter\000aimport org.apache.logging.log4j.LogManager\000aimport org.apache.logging.log4j.Logger\000a\000aimport java.util.concurrent.ConcurrentLinkedQueue\000a\000a/**\000a * The ''DoC'' class extends the ''AbstractCompilerDirective'' super class.\000a * This compiler directive class handles the logic of the ''DO'' keyword at compile time in the interpreter.\000a */\000aclass DoC extends AbstractCompilerDirective {\000a\000a    private static final Logger log = LogManager.getLogger(this.class.getName())\000a\000a    ForthCompiler compiler\000a    ForthInterpreter interpreter\000a\000a/**\000a * The `execute` method is responsible for performing the compile-time operations for ''DO'' in the Forth compiler.\000a *\000a * @param newWord The word that is being compiled.\000a * @param compiler The ForthCompiler instance.\000a * @param interpreter The ForthInterpreter instance.\000a * @return Boolean indicating if a new line needs to be printed or not in the Forth REPL.\000a * @exception ForthCompilerException if there''s no matching ''IF'' or ''THEN'' for ''ELSE''.\000a */\000a    @Override\000a    Boolean execute(Word word, ForthCompiler compiler, ForthInterpreter interpreter) {\000a        // Fail Fast\000a        if (!compiler.tokens.contains("loop") && !compiler.tokens.contains("+loop")) {\000a            interpreter.words.clear()\000a            throw new ForthCompilerException("No matching ''loop'' or ''+loop''")\000a        }\000a\000a        ConcurrentLinkedQueue<Word> words = interpreter.words\000a        Word nextWord = null\000a\000a        try {\000a            compiler.forthWordsBuffer.add(word.name)\000a            while (!compiler.tokens.isEmpty()) {\000a                String token = compiler.tokens.poll()\000a                if (token == "loop") {\000a                    compiler.forthWordsBuffer.add(token)\000a                    break\000a                }\000a\000a                if (token == "+loop") {\000a                    compiler.forthWordsBuffer.add(token)\000a                    break\000a                }\000a\000a                nextWord = compiler.wordService.findByName(token)\000a                if (nextWord != null) {\000a                    // if nextWord has a defined compiler directive we need to insure it''s executed as well.\000a                    if (nextWord.compileClass != null && !nextWord.compileClass.isEmpty() && !nextWord.compileClass.isBlank()) {\000a                        def classLoader = new GroovyClassLoader()\000a                        Class groovyClass = classLoader.parseClass(nextWord.compileClass)\000a                        CompilerDirective compileTime = groovyClass.getDeclaredConstructor().newInstance() as CompilerDirective\000a                        Boolean output = compileTime.execute(nextWord, compiler, interpreter)\000a                        continue\000a                    }\000a                    compiler.forthWordsBuffer.add(nextWord.name)\000a                } else if (compiler.canParseToInt(token)) {\000a                    compiler.compileIntegerLiteral(token)\000a                }\000a            }\000a        } catch (Exception e) {\000a            throw new ForthCompilerException("${this.class.simpleName} failed.", e)\000a        }\000a        return false\000a    }\000a}\000a',
        TRUE, TIMESTAMP '2024-02-11 12:08:14.056', 'do',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Do extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a    //: test 10 0 do cr ." hello " loop ;\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer index = interpreter.dataStack.pop() as Integer\000a        Integer limit = interpreter.dataStack.pop() as Integer\000a\000a        // The order of limit and index here is significant: we''re making use of a Last-In-First-Out stack\000a        interpreter.returnStack.push(index)\000a        interpreter.returnStack.push(limit)\000a        return false\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (36, 0, TRUE, NULL, TRUE, TIMESTAMP '2024-02-11 12:08:14.08', 'loop',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a//file:noinspection GroovyAssignabilityCheck\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Loop extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer limit = interpreter.returnStack.pop()\000a        Integer index = interpreter.returnStack.pop()\000a\000a        if (index < limit - 1) {\000a            index++\000a            interpreter.returnStack.push(index)\000a            interpreter.returnStack.push(limit)\000a            parentWord.executionIndex = parentWord.forthWords.indexOf("do")\000a        }\000a\000a        return false\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (37, 1, TRUE, NULL, TRUE, TIMESTAMP '2024-02-11 12:08:14.103', '+loop',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a//file:noinspection GroovyAssignabilityCheck\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass PlusLoop extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer plus = interpreter.dataStack.pop()\000a        Integer limit = interpreter.returnStack.pop()\000a        Integer index = interpreter.returnStack.pop()\000a\000a        if (index < limit - 1) {\000a            index = index + plus\000a            interpreter.dataStack.push(plus)\000a            interpreter.returnStack.push(index)\000a            interpreter.returnStack.push(limit)\000a            parentWord.executionIndex = parentWord.forthWords.indexOf("do")\000a        }\000a\000a        return false\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (38, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:14.123', '!',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Store extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer addr = interpreter.dataStack.pop() as Integer\000a        Byte b = interpreter.dataStack.pop() as Byte\000a        interpreter.blockService.store(addr, b)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (39, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:14.144', '@',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Fetch extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer addr = interpreter.dataStack.pop() as Integer\000a        Byte b = interpreter.blockService.fetch(addr)\000a        interpreter.dataStack.push(b)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (40, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:14.162', '?',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass QuestionMark extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer addr = interpreter.dataStack.pop() as Integer\000a        Integer i = interpreter.memory.get(addr) as Integer\000a        print(i)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (41, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:14.182', 'words',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Words extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        List<Word> words = interpreter.wordService.list() as ArrayList\000a        words.each { Word word1 ->\000a            print(word1.name + " ")\000a        }\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (42, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:14.202', '*',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Times extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer n2 = interpreter.dataStack.pop() as Integer\000a        Integer n1 = interpreter.dataStack.pop() as Integer\000a        Integer n3 = n1 * n2\000a        interpreter.dataStack.push(n3)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (43, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:14.221', '/',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a//file:noinspection GroovyAssignabilityCheck\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Divide extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer n2 = interpreter.dataStack.pop() as Integer\000a        Integer n1 = interpreter.dataStack.pop() as Integer\000a        Integer n3 = n1 / n2\000a        interpreter.dataStack.push(n3)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (44, 3, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:14.239', '/',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass TimesDivide extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer n3 = interpreter.dataStack.pop() as Integer\000a        Integer n2 = interpreter.dataStack.pop() as Integer\000a        Integer n1 = interpreter.dataStack.pop() as Integer\000a        Integer n4 = ((n1 * n2) / n3) as Integer\000a        interpreter.dataStack.push(n4)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (45, 2, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:14.257', '+!',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass PlusStore extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer addr = interpreter.dataStack.pop() as Integer\000a        Integer n1 = interpreter.dataStack.pop() as Integer\000a        Integer mem = interpreter.memory.get(addr) as Integer\000a        Integer sum = mem + n1\000a        interpreter.memory.set(addr, sum)\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL),
       (46, 1, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:14.274', 'block',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass BlockWord extends AbstractRuntime {\000a\000a/**\000a * Execute the FORTH word from the interpreter.\000a * @param interpreter The FORTH interpreter instance.\000a * @param word The word that is being executed.\000a * @param parentWord It''s parent word (if any).\000a * @return An object of any type. By convention we are returning a Boolean to indicate if the REPL\000a * should print a newline or not. If you do anything with a returned Object, be sure to set\000a * forthOutput to to a Boolean for REPL.\000a */\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a        Integer blockNumber = interpreter.dataStack.pop() as Integer\000a\000a        return null\000a    }\000a}\000a',
        NULL, NULL, 0, 1, NULL);
INSERT INTO "PUBLIC"."WORD"
VALUES (47, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:32.65', 'test1', NULL, NULL, NULL, 1, 1, NULL),
       (48, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:32.674',
        'int_literal_f27e0c37b7c7-482e-a4e4-72fcd3f1a55b',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Literal extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a\000a        // Code goes here\000a        if (word.name.startsWith("int_")) {\000a            Word lit = word\000a            Integer arg = lit.stackValue\000a            interpreter.dataStack.push(arg)\000a        } else if (word.name.startsWith("str_")) {\000a            Word lit = word\000a            String string = lit.stringLiteral\000a            if (string != "\\"") {\000a                print(word.stringLiteral.replaceAll("\\"", "") + " ")\000a            }\000a        }\000a        return null\000a    }\000a}\000a',
        42, NULL, 0, 1, 47),
       (49, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:32.683',
        'int_literal_505989d3ad31-4f59-b8db-d2f125a9a9e9',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Literal extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a\000a        // Code goes here\000a        if (word.name.startsWith("int_")) {\000a            Word lit = word\000a            Integer arg = lit.stackValue\000a            interpreter.dataStack.push(arg)\000a        } else if (word.name.startsWith("str_")) {\000a            Word lit = word\000a            String string = lit.stringLiteral\000a            if (string != "\\"") {\000a                print(word.stringLiteral.replaceAll("\\"", "") + " ")\000a            }\000a        }\000a        return null\000a    }\000a}\000a',
        1, NULL, 0, 1, 47),
       (50, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:46.152', 'test2', NULL, NULL, NULL, 1, 1, NULL),
       (51, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:08:46.163',
        'int_literal_22ed443d1796-4897-bc3c-820ac57c8ecb',
        U&'/*\000a * Copyright 2024 Robert A. James\000a *\000a * Licensed under the Apache License, Version 2.0 (the "License");\000a * you may not use this file except in compliance with the License.\000a * You may obtain a copy of the License at\000a *\000a *   http://www.apache.org/licenses/LICENSE-2.0\000a *\000a * Unless required by applicable law or agreed to in writing, software\000a * distributed under the License is distributed on an "AS IS" BASIS,\000a * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\000a * See the License for the specific language governing permissions and\000a * limitations under the License.\000a */\000a\000apackage primitives_classes.runtime\000a\000aimport com.rajames.forth.dictionary.Word\000aimport com.rajames.forth.runtime.AbstractRuntime\000aimport com.rajames.forth.runtime.ForthInterpreter\000a\000aclass Literal extends AbstractRuntime {\000a\000a    @Override\000a    Object execute(ForthInterpreter interpreter, Word word, Word parentWord) {\000a\000a        // Code goes here\000a        if (word.name.startsWith("int_")) {\000a            Word lit = word\000a            Integer arg = lit.stackValue\000a            interpreter.dataStack.push(arg)\000a        } else if (word.name.startsWith("str_")) {\000a            Word lit = word\000a            String string = lit.stringLiteral\000a            if (string != "\\"") {\000a                print(word.stringLiteral.replaceAll("\\"", "") + " ")\000a            }\000a        }\000a        return null\000a    }\000a}\000a',
        1, NULL, 0, 1, 50);
INSERT INTO "PUBLIC"."WORD"
VALUES (52, 0, FALSE, NULL, FALSE, TIMESTAMP '2024-02-11 12:09:05.77', 'test3', NULL, NULL, NULL, 1, 1, NULL);
CREATE INDEX "PUBLIC"."WORD_NAME_INDEX" ON "PUBLIC"."WORD" ("NAME" NULLS FIRST);
ALTER TABLE "PUBLIC"."BLOCK"
    ADD CONSTRAINT "PUBLIC"."UK_LXXG0WCF799Q8MYFDV942IU2B" UNIQUE ("BLOCKNUMBER");
ALTER TABLE "PUBLIC"."DICTIONARY"
    ADD CONSTRAINT "PUBLIC"."UK_BFLAUXN62LF5A1PEXOI1Q9UTX" UNIQUE ("NAME");
ALTER TABLE "PUBLIC"."WORD"
    ADD CONSTRAINT "PUBLIC"."FKGOXHLJHA8FXBLY06SVO210LJ" FOREIGN KEY ("PARENT_WORD_NAME") REFERENCES "PUBLIC"."WORD" ("ID") NOCHECK;
ALTER TABLE "PUBLIC"."FORTHWORDS"
    ADD CONSTRAINT "PUBLIC"."FK6R5Y1XEMN44YELFD5VUUTHOPF" FOREIGN KEY ("WORD_ID") REFERENCES "PUBLIC"."WORD" ("ID") NOCHECK;
ALTER TABLE "PUBLIC"."WORD"
    ADD CONSTRAINT "PUBLIC"."FKPEVQ98N5Q80GKUHDF3YIK5SBA" FOREIGN KEY ("DICTIONARY_ID") REFERENCES "PUBLIC"."DICTIONARY" ("ID") NOCHECK;
